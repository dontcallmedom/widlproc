/*
 * Licensed to OMTP Ltd. (OMTP) under one or more contributor license agreements. 
 * See the NOTICE file distributed with this work for additional information regarding 
 * copyright ownership. 
 * 
 * The Reference Implementation (save for such parts of the reference implementation made 
 * available under separate terms and conditions) is made available under the terms of the 
 * Apache License, version 2.0, subject to the condition that any "Works" and "Derivative 
 * Works" used or distributed for commercial purposes must be and remain compliant with the
 * BONDI specification as promulgated by OMTP in each release. Your implementation of the 
 * Reference Implementation (whether object or source) must maintain these conditions, and 
 * you must notify any recipient of this condition in a conspicuous way.
 * 
 * You may not use this BONDI Reference Implementation except in compliance with the License. 
 * 
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 or at 
 * http://bondi.omtp.org/BONDI-LICENSE-2.0 
 */

/**
 * \brief Common BONDI functionality.
 *
 * These definitions can be used in all other BONDI modules as dependencies.
  * \version 1.0
 */
module bondi {

	/**
	 * \brief Array of DOMStrings.
	 */
	typedef sequence<DOMString> StringArray;

	/**
	 * \brief Array of 8-bit unsigned integer values.
	 */
	typedef sequence<octet>     ByteArray;

	/**
	 * \brief Array of 16-bit signed integer values.
	 */
	typedef sequence<short>       ShortArray;

	/**
	 * \brief Array of 32-bit signed integer values.
	 */
	typedef sequence<long>      LongArray;

	/**
	 * \brief Array of floating point values.
	 */
	typedef sequence<float>     FloatArray;

	/**
	 * \brief Generic success callback interface.
	 */
	[Callback] interface SuccessCallback {
		void onSuccess(in Object ob);
	};

	/**
	 * \brief Generic error callback interface.
	 */
	[Callback] interface ErrorCallback {
		void onError(in Error error);
	};

	interface GenericError {

		/**
		 * \brief 16-bit error code.
		 */
		readonly attribute unsigned short code;
	};
		

	/**
	 * \brief Generic error interface.
	 *
	 * The error codes must be in the range 10000-19999.
	 */
	interface DeviceAPIError : GenericError {

		/**
		 * \brief Unknown error.
		 */
		const unsigned short UNKNOWN_ERROR           = 10000;

		/**
		 * \brief Invalid value was specified as input parameter.
		 */
		const unsigned short INVALID_ARGUMENT_ERROR  = 10001;

		/**
		 * \brief The searched value or object was not found.
		 */
		const unsigned short NOT_FOUND_ERROR         = 10002;

		/**
		 * \brief Operation is pending.
		 */
		const unsigned short PENDING_OPERATION_ERROR = 10003;

		/**
		 * \brief Input/Output error.
		 */
		const unsigned short IO_ERROR                = 10004;

		/**
		 * \brief Not supported error.
		 */
		const unsigned short NOT_SUPPORTED_ERROR     = 10005;
	};

	/**
	 * \brief Security error interface.
	 *
	 * The error codes must be in the range 20000-29999
	 */
	interface SecurityError : GenericError {
		const unsigned short PERMISSION_DENIED_ERROR = 20000;
	};

	/**
	 * \brief PendingOperation.
	 *
	 * Interface that is returned by asynchronous operations in order to
	 * provide a cancellation operation.
	 */
	interface PendingOperation {
		/**
		 * \brief Call to cancel the underlying asynchronous operation.
		 *
		 * This call is always successful, i.e. the pending operation i.e.
		 * either cancelled or one of the callback is called.
		 *
		 * \return <em>false</em> if one of the callback functions supplied
		 * to the operation being cancelled has been called during the call to this method,
		 * <em>true</em> otherwise, i.e. the pending operation was cancelled
		 * and it was accomplished neither successfully nor errorenously.
		 */
		boolean cancel();
	};

	/**
	 * \brief BONDI root API.
	 */
	[NoInterfaceObject]
	interface bondi {
		/**
		 * \brief Requests a feature.
		 *
		 * This function requests a named feature
		 * asynchronously and returns a pending operation object.
		 * If it succeeds it calls the successCallback and passes in
		 * the object of the requested feature. If it fails it calls
		 * the errorCallback passing in a DeviceAPIError which provides 
		 * an error message and error code indicating the nature of the error.
		 *
		 * If the requested feature binds itself to a root namespace
		 * ( for example, "bondi.pim.contact") this will happen prior to the
		 * successCallback being invoked.
		 *
		 * \param successCallback  the success callback function
		 * \param errorCallback    the error callback function
		 * \param name             the feature name IRI
		 *
		 * \return PendingOperation enabling the requester to cancel this request.
		 *
		 * The errorCallback will receive one of the following errors:
		 * \n DeviceAPIError INVALID_ARGUMENT_ERROR if a malformed
		 * argument has been supplied or a required argument has been omitted.
		 * \n DeviceAPIError NOT_FOUND_ERROR if the requested feature could not be found.
		 * \n SecurityError PERMISSION_DENIED_ERROR if the
		 * requested feature is not permitted to load/bind or that
		 * access to a required device capability has been denied.
		 * \n DeviceAPIError UNKNOWN_ERROR if any other error occurred.
		 * \throw SecurityError PERMISSION_DENIED_ERROR if the requested
		 * feature is not permitted to load/bind
		 * \throw DeviceAPIError UNKNOWN_ERROR if an error occurred and a pending
		 * operation object can't be returned.
		 */
		PendingOperation requestFeature(in SuccessCallback successCallback,
		                                in ErrorCallback   errorCallback,
		                                in DOMString       name)
			raises(DeviceAPIError, SecurityError);
	};
};
